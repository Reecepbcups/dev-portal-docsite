"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[46167],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>m});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),g=o,m=d["".concat(p,".").concat(g)]||d[g]||c[g]||a;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},10709:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(58168),o=(t(96540),t(15680));const a={sidebar_position:1},i=void 0,s={unversionedId:"build/building-apps/app-go-genesis",id:"version-0.52/build/building-apps/app-go-genesis",title:"app-go-genesis",description:"Modifying the DefaultGenesis",source:"@site/cosmos-sdk_versioned_docs/version-0.52/build/building-apps/06-app-go-genesis.md",sourceDirName:"build/building-apps",slug:"/build/building-apps/app-go-genesis",permalink:"/cosmos-sdk/build/building-apps/app-go-genesis",draft:!1,tags:[],version:"0.52",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"buildSidebar",previous:{title:"Application Testnets",permalink:"/cosmos-sdk/build/building-apps/app-testnet"},next:{title:"System Tests",permalink:"/cosmos-sdk/build/building-apps/system-tests"}},p={},l=[{value:"Modifying the <code>DefaultGenesis</code>",id:"modifying-the-defaultgenesis",level:3}],u={toc:l},d="wrapper";function c(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"modifying-the-defaultgenesis"},"Modifying the ",(0,o.yg)("inlineCode",{parentName:"h3"},"DefaultGenesis")),(0,o.yg)("p",null,"It is possible to modify the DefaultGenesis parameters for modules by wrapping the module, providing it to the ",(0,o.yg)("inlineCode",{parentName:"p"},"*module.Manager")," and injecting it with ",(0,o.yg)("inlineCode",{parentName:"p"},"depinject"),"."),(0,o.yg)("p",null,"Example ( staking ) :"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},'type CustomStakingModule struct {\n    staking.AppModule\n    cdc codec.Codec\n}\n\n// DefaultGenesis will override the Staking module DefaultGenesis AppModuleBasic method.\nfunc (cm CustomStakingModule) DefaultGenesis() json.RawMessage {\n    params := stakingtypes.DefaultParams()\n    params.BondDenom = "mydenom"\n\n    return cm.cdc.MustMarshalJSON(&stakingtypes.GenesisState{\n        Params: params,\n    })\n}\n\n// option 1 ( for depinject users ): override previous module manager\ndepinject.Inject(\n// ... provider/invoker/supplier\n&moduleManager,\n)\n\noldStakingModule,_ := moduleManager.Modules()[stakingtypes.ModuleName].(staking.AppModule)\nmoduleManager.Modules()[stakingtypes.ModuleName] = CustomStakingModule{\n    AppModule: oldStakingModule,\n    cdc: appCodec,\n}\n\n// option 2 ( for non depinject users ): use new module manager\nmoduleManager := module.NewManagerFromMap(map[string]appmodule.AppModule{\nstakingtypes.ModuleName: CustomStakingModule{cdc: appCodec, AppModule: staking.NewAppModule(...)},\n// other modules ...\n})\n\n// set the module manager\napp.ModuleManager = moduleManager\n')))}c.isMDXComponent=!0}}]);