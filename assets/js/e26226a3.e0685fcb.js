"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[18478],{15680:(e,r,o)=>{o.d(r,{xA:()=>c,yg:()=>b});var n=o(96540);function t(e,r,o){return r in e?Object.defineProperty(e,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[r]=o,e}function a(e,r){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),o.push.apply(o,n)}return o}function p(e){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?a(Object(o),!0).forEach((function(r){t(e,r,o[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(o,r))}))}return e}function s(e,r){if(null==e)return{};var o,n,t=function(e,r){if(null==e)return{};var o,n,t={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],r.indexOf(o)>=0||(t[o]=e[o]);return t}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],r.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var i=n.createContext({}),l=function(e){var r=n.useContext(i),o=r;return e&&(o="function"==typeof e?e(r):p(p({},r),e)),o},c=function(e){var r=l(e.components);return n.createElement(i.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var o=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(o),m=t,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return o?n.createElement(b,p(p({ref:r},c),{},{components:o})):n.createElement(b,p({ref:r},c))}));function b(e,r){var o=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=o.length,p=new Array(a);p[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[d]="string"==typeof e?e:t,p[1]=s;for(var l=2;l<a;l++)p[l]=o[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},69285:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=o(58168),t=(o(96540),o(15680));const a={},p="Process Proposal",s={unversionedId:"docs/build/abci/process-proposal",id:"docs/build/abci/process-proposal",title:"Process Proposal",description:"ProcessProposal handles the validation of a proposal from PrepareProposal,",source:"@site/cosmos-sdk/docs/build/abci/02-process-proposal.md",sourceDirName:"docs/build/abci",slug:"/docs/build/abci/process-proposal",permalink:"/cosmos-sdk/next/docs/build/abci/process-proposal",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"buildSidebar",previous:{title:"Prepare Proposal",permalink:"/cosmos-sdk/next/docs/build/abci/prepare-proposal"},next:{title:"Vote Extensions",permalink:"/cosmos-sdk/next/docs/build/abci/vote-extensions"}},i={},l=[],c={toc:l},d="wrapper";function u(e){let{components:r,...o}=e;return(0,t.yg)(d,(0,n.A)({},c,o,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"process-proposal"},"Process Proposal"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," handles the validation of a proposal from ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal"),",\nwhich also includes a block header. Meaning, that after a block has been proposed\nthe other validators have the right to accept or reject that block. The validator in the\ndefault implementation of ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," runs basic validity checks on each\ntransaction."),(0,t.yg)("p",null,"Note, ",(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," MAY NOT be non-deterministic, i.e. it must be deterministic.\nThis means if ",(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," panics or fails and we reject, all honest validator\nprocesses should reject (i.e., prevote nil). If so, then CometBFT will start a new round with a new block proposal, and the same cycle will happen with ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal"),"\nand ",(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," for the new proposal."),(0,t.yg)("p",null,"Here is the implementation of the default implementation:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.52.0-beta.1/baseapp/abci_utils.go#L224-L231\n")),(0,t.yg)("p",null,"Like ",(0,t.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," this implementation is the default and can be modified by\nthe application developer in ",(0,t.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/building-apps/app-go-di"},(0,t.yg)("inlineCode",{parentName:"a"},"app_di.go")),". If you decide to implement\nyour own ",(0,t.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," handler, you must ensure that the transactions\nprovided in the proposal DO NOT exceed the maximum block gas and ",(0,t.yg)("inlineCode",{parentName:"p"},"maxtxbytes")," (if set)."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-go"},"processOpt := func(app *baseapp.BaseApp) {\n    abciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\n    app.SetProcessProposal(abciPropHandler.ProcessProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, processOpt)\n")))}u.isMDXComponent=!0}}]);