"use strict";(self.webpackChunkdev_portal_docsite=self.webpackChunkdev_portal_docsite||[]).push([[30921],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>b});var o=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,b=d["".concat(s,".").concat(u)]||d[u]||m[u]||a;return n?o.createElement(b,p(p({ref:t},c),{},{components:n})):o.createElement(b,p({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,p=new Array(a);p[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,p[1]=i;for(var l=2;l<a;l++)p[l]=n[l];return o.createElement.apply(null,p)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},32349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=n(58168),r=(n(96540),n(15680));const a={},p="Prepare Proposal",i={unversionedId:"build/abci/prepare-proposal",id:"version-0.52/build/abci/prepare-proposal",title:"Prepare Proposal",description:"PrepareProposal handles construction of the block, meaning that when a proposer",source:"@site/cosmos-sdk_versioned_docs/version-0.52/build/abci/01-prepare-proposal.md",sourceDirName:"build/abci",slug:"/build/abci/prepare-proposal",permalink:"/cosmos-sdk/build/abci/prepare-proposal",draft:!1,tags:[],version:"0.52",sidebarPosition:1,frontMatter:{},sidebar:"buildSidebar",previous:{title:"Introduction",permalink:"/cosmos-sdk/build/abci/introduction"},next:{title:"Process Proposal",permalink:"/cosmos-sdk/build/abci/process-proposal"}},s={},l=[],c={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,o.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"prepare-proposal"},"Prepare Proposal"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," handles construction of the block, meaning that when a proposer\nis preparing to propose a block, it requests the application to evaluate a\n",(0,r.yg)("inlineCode",{parentName:"p"},"RequestPrepareProposal"),", which contains a series of transactions from CometBFT's\nmempool. At this point, the application has complete control over the proposal.\nIt can modify, delete, and inject transactions from its own app-side mempool into\nthe proposal or even ignore all the transactions altogether. What the application\ndoes with the transactions provided to it by ",(0,r.yg)("inlineCode",{parentName:"p"},"RequestPrepareProposal")," has no\neffect on CometBFT's mempool."),(0,r.yg)("p",null,"Note, that the application defines the semantics of the ",(0,r.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," and it\nMAY be non-deterministic and is only executed by the current block proposer."),(0,r.yg)("p",null,"Now, reading mempool twice in the previous sentence is confusing, lets break it down.\nCometBFT has a mempool that handles gossiping transactions to other nodes\nin the network. The order of these transactions is determined by CometBFT's mempool,\nusing FIFO as the sole ordering mechanism. It's worth noting that the priority mempool\nin Comet was removed or deprecated.\nHowever, since the application is able to fully inspect\nall transactions, it can provide greater control over transaction ordering.\nAllowing the application to handle ordering enables the application to define how\nit would like the block constructed."),(0,r.yg)("p",null,"The Cosmos SDK defines the ",(0,r.yg)("inlineCode",{parentName:"p"},"DefaultProposalHandler")," type, which provides applications with\n",(0,r.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"ProcessProposal")," handlers. If you decide to implement your\nown ",(0,r.yg)("inlineCode",{parentName:"p"},"PrepareProposal")," handler, you must ensure that the transactions\nselected DO NOT exceed the maximum block gas (if set) and the maximum bytes provided\nby ",(0,r.yg)("inlineCode",{parentName:"p"},"req.MaxBytes"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.52.0-beta.1/baseapp/abci_utils.go\n")),(0,r.yg)("p",null,"This default implementation can be overridden by the application developer in\nfavor of a custom implementation in ",(0,r.yg)("a",{parentName:"p",href:"https://docs.cosmos.network/main/build/building-apps/app-go-di"},(0,r.yg)("inlineCode",{parentName:"a"},"app_di.go")),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},"prepareOpt := func(app *baseapp.BaseApp) {\n    abciPropHandler := baseapp.NewDefaultProposalHandler(mempool, app)\n    app.SetPrepareProposal(abciPropHandler.PrepareProposalHandler())\n}\n\nbaseAppOptions = append(baseAppOptions, prepareOpt)\n")))}m.isMDXComponent=!0}}]);